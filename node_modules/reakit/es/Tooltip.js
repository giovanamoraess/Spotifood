import styled from './styled.js';
import { a as _extends, c as _inheritsLoose, d as _assertThisInitialized, e as _defineProperty } from './chunk-fb907809.js';
import { a as as } from './as-3754c325.js';
import { a as PopoverArrow } from './chunk-17f18cc6.js';
import Popover from './Popover.js';
import { findDOMNode } from 'react-dom';
import { theme } from 'styled-tools';
import { createElement, Component, createRef } from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import 'styled-components';
import '@emotion/is-prop-valid';
import './chunk-3dd91a32.js';
import './chunk-a7ce379e.js';
import './Box.js';
import 'prop-types';
import './chunk-d8771a86.js';
import './Hidden.js';
import './chunk-d13f9581.js';
import 'constate';
import './chunk-7684adef.js';
import './chunk-0cfb3fe1.js';
import 'popper.js';

var TooltipComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TooltipComponent, _React$Component);

  function TooltipComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      visible: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isControlled", function () {
      return typeof _this.props.visible !== "undefined";
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "show", function () {
      return _this.setState({
        visible: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hide", function () {
      return _this.setState({
        visible: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTooltip", function () {
      return findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));
    });

    return _this;
  }

  var _proto = TooltipComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$getTooltip = this.getTooltip(),
        parentNode = _this$getTooltip.parentNode;

    if (parentNode && !this.isControlled()) {
      parentNode.addEventListener("mouseenter", this.show);
      parentNode.addEventListener("focus", this.show);
      parentNode.addEventListener("mouseleave", this.hide);
      parentNode.addEventListener("blur", this.hide);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$getTooltip2 = this.getTooltip(),
        parentNode = _this$getTooltip2.parentNode;

    if (parentNode) {
      parentNode.removeEventListener("mouseenter", this.show);
      parentNode.removeEventListener("focus", this.show);
      parentNode.removeEventListener("mouseleave", this.hide);
      parentNode.removeEventListener("blur", this.hide);
    }
  };

  _proto.render = function render() {
    var _ref = this.isControlled() ? this.props : this.state,
        visible = _ref.visible;

    return createElement(Popover, _extends({}, this.props, {
      visible: visible
    }));
  };

  return TooltipComponent;
}(Component);

hoistNonReactStatics(TooltipComponent, Popover);
var Tooltip = styled(TooltipComponent).withConfig({
  displayName: "Tooltip",
  componentId: "sc-15idyy7-0"
})(["", ";"], theme("Tooltip"));
Tooltip.defaultProps = {
  role: "tooltip",
  placement: "top",
  opaque: true,
  palette: "grayscale"
};
var Tooltip$1 = as("div")(Tooltip);

var TooltipArrow = styled(PopoverArrow).withConfig({
  displayName: "TooltipArrow",
  componentId: "rwnerm-0"
})(["", ";"], theme("TooltipArrow"));
TooltipArrow.defaultProps = {
  palette: "grayscale"
};
var TooltipArrow$1 = as("div")(TooltipArrow);

var index = Object.assign(Tooltip$1, {
  Arrow: TooltipArrow$1
});

export default index;
