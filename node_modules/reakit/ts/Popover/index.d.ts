export * from "./Popover";
export * from "./PopoverArrow";
export * from "./PopoverContainer";
export * from "./PopoverToggle";
export * from "./PopoverShow";
export * from "./PopoverHide";
declare const _default: import("../_utils/types").AsComponent<"div", import("styled-components").ThemedOuterStyledProps<Pick<import("./Popover").PopoverProps, "visible" | "opaque" | "fixed" | "hide" | "flip" | "absolute" | "relative" | "static" | "sticky" | "role" | "onTransitionEnd" | "palette" | "tone" | "defaultExpand" | "expand" | "defaultSlide" | "slide" | "translateX" | "translateY" | "slideOffset" | "hideOnEsc" | "hideOnClickOutside" | "unmount" | "fade" | "duration" | "delay" | "timing" | "animated" | "transitioning" | "gutter" | "placement" | "shift" | "popoverId"> & {
    theme?: any;
}, any>> & {
    Arrow: import("../_utils/types").AsComponent<"div", import("styled-components").ThemedOuterStyledProps<Pick<import("./PopoverArrow").PopoverArrowProps, "opaque" | "fixed" | "absolute" | "relative" | "static" | "sticky" | "fillColor" | "strokeColor" | "palette" | "tone"> & {
        theme?: any;
    }, any>>;
    Container: import("constate/dist/ts/src/types").ComposableContainer<import("./PopoverContainer").PopoverContainerState, import("../Hidden/HiddenContainer").HiddenContainerActions, {}, {}>;
    Toggle: import("../_utils/types").AsComponent<"button", import("styled-components").ThemedOuterStyledProps<Pick<import("./PopoverToggle").PopoverToggleProps, "visible" | "opaque" | "fixed" | "absolute" | "relative" | "static" | "sticky" | "onClick" | "palette" | "tone" | "toggle" | "popoverId"> & {
        theme?: any;
    }, any>>;
    Show: import("../_utils/types").AsComponent<"button", import("styled-components").ThemedOuterStyledProps<Pick<import("./PopoverShow").PopoverShowProps, "visible" | "show" | "opaque" | "fixed" | "absolute" | "relative" | "static" | "sticky" | "onClick" | "palette" | "tone" | "popoverId"> & {
        theme?: any;
    }, any>>;
    Hide: import("../_utils/types").AsComponent<"button", import("styled-components").ThemedOuterStyledProps<Pick<import("./PopoverHide").PopoverHideProps, "visible" | "opaque" | "fixed" | "hide" | "absolute" | "relative" | "static" | "sticky" | "onClick" | "palette" | "tone" | "popoverId"> & {
        theme?: any;
    }, any>>;
};
export default _default;
