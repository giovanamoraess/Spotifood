'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var styled = require('./styled.js');
var __chunk_1 = require('./chunk-582bef72.js');
var as = require('./as-84eb94f3.js');
var __chunk_9 = require('./chunk-0f3a2be7.js');
var Popover = require('./Popover.js');
var ReactDOM = require('react-dom');
var styledTools = require('styled-tools');
var React = require('react');
var hoistNonReactStatics = _interopDefault(require('hoist-non-react-statics'));
require('styled-components');
require('@emotion/is-prop-valid');
require('./chunk-e9f69eed.js');
require('./chunk-f0c301b2.js');
require('./Box.js');
require('prop-types');
require('./chunk-25591e69.js');
require('./Hidden.js');
require('./chunk-3027c8cd.js');
require('constate');
require('./chunk-0f087053.js');
require('./chunk-8931826f.js');
require('popper.js');

var TooltipComponent =
/*#__PURE__*/
function (_React$Component) {
  __chunk_1._inheritsLoose(TooltipComponent, _React$Component);

  function TooltipComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "state", {
      visible: false
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "isControlled", function () {
      return typeof _this.props.visible !== "undefined";
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "show", function () {
      return _this.setState({
        visible: true
      });
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "hide", function () {
      return _this.setState({
        visible: false
      });
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getTooltip", function () {
      return ReactDOM.findDOMNode(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)));
    });

    return _this;
  }

  var _proto = TooltipComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$getTooltip = this.getTooltip(),
        parentNode = _this$getTooltip.parentNode;

    if (parentNode && !this.isControlled()) {
      parentNode.addEventListener("mouseenter", this.show);
      parentNode.addEventListener("focus", this.show);
      parentNode.addEventListener("mouseleave", this.hide);
      parentNode.addEventListener("blur", this.hide);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$getTooltip2 = this.getTooltip(),
        parentNode = _this$getTooltip2.parentNode;

    if (parentNode) {
      parentNode.removeEventListener("mouseenter", this.show);
      parentNode.removeEventListener("focus", this.show);
      parentNode.removeEventListener("mouseleave", this.hide);
      parentNode.removeEventListener("blur", this.hide);
    }
  };

  _proto.render = function render() {
    var _ref = this.isControlled() ? this.props : this.state,
        visible = _ref.visible;

    return React.createElement(Popover.default, __chunk_1._extends({}, this.props, {
      visible: visible
    }));
  };

  return TooltipComponent;
}(React.Component);

hoistNonReactStatics(TooltipComponent, Popover.default);
var Tooltip = styled.default(TooltipComponent).withConfig({
  displayName: "Tooltip",
  componentId: "sc-15idyy7-0"
})(["", ";"], styledTools.theme("Tooltip"));
Tooltip.defaultProps = {
  role: "tooltip",
  placement: "top",
  opaque: true,
  palette: "grayscale"
};
var Tooltip$1 = as.as("div")(Tooltip);

var TooltipArrow = styled.default(__chunk_9.PopoverArrow).withConfig({
  displayName: "TooltipArrow",
  componentId: "rwnerm-0"
})(["", ";"], styledTools.theme("TooltipArrow"));
TooltipArrow.defaultProps = {
  palette: "grayscale"
};
var TooltipArrow$1 = as.as("div")(TooltipArrow);

var index = Object.assign(Tooltip$1, {
  Arrow: TooltipArrow$1
});

exports.default = index;
